
learning_alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076c  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c9  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000123  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint32_t time_learn = 0;

int main(void){
//	DDRB=0xFF;          //PORTB la output PORT
//	PORTB=0x00;
	DDRD=0b100; //D2 is output
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	8a b9       	out	0x0a, r24	; 10

	TCCR2A=0; //no compare mode
  94:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TIMSK2=(1<<TOIE2);//timer2 overflow interrupt enable
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCCR2B=(1<<CS22)|(1<<CS21)|(1<<CS20); //dividing 1024 from pre-scaler,
  9e:	87 e0       	ldi	r24, 0x07	; 7
  a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	//so with 8bit, timer2 overflows after 1/(16M/(1024*256))s
	sei(); 
  a4:	78 94       	sei
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x16>

000000a8 <RepeatAlarm>:

}

void RepeatAlarm(void){
	unsigned int  counter_In1_Alarm =0; //ms
	unsigned int  counter_In2_Alarm =0;
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
	}

}

void RepeatAlarm(void){
	unsigned int  counter_In1_Alarm =0; //ms
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
	unsigned int  counter_In2_Alarm =0;

	while(1){//repeat infinitely until reset
	if (counter_In1_Alarm  < 1000){
  b0:	88 3e       	cpi	r24, 0xE8	; 232
  b2:	43 e0       	ldi	r20, 0x03	; 3
  b4:	94 07       	cpc	r25, r20
  b6:	98 f4       	brcc	.+38     	; 0xde <RepeatAlarm+0x36>
		if ( counter_In2_Alarm <100){
  b8:	24 36       	cpi	r18, 0x64	; 100
  ba:	31 05       	cpc	r19, r1
  bc:	28 f4       	brcc	.+10     	; 0xc8 <RepeatAlarm+0x20>
			PORTD^=0b100; //reverse B2
  be:	5b b1       	in	r21, 0x0b	; 11
  c0:	44 e0       	ldi	r20, 0x04	; 4
  c2:	45 27       	eor	r20, r21
  c4:	4b b9       	out	0x0b, r20	; 11
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <RepeatAlarm+0x30>
		}
		else if (counter_In2_Alarm <1000){
  c8:	28 3e       	cpi	r18, 0xE8	; 232
  ca:	e3 e0       	ldi	r30, 0x03	; 3
  cc:	3e 07       	cpc	r19, r30
  ce:	10 f4       	brcc	.+4      	; 0xd4 <RepeatAlarm+0x2c>
			PORTD=0b000;
  d0:	1b b8       	out	0x0b, r1	; 11
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <RepeatAlarm+0x30>
		}
		else{
			counter_In2_Alarm=0;
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
		}
		counter_In2_Alarm++;
  d8:	2f 5f       	subi	r18, 0xFF	; 255
  da:	3f 4f       	sbci	r19, 0xFF	; 255
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <RepeatAlarm+0x4a>
	}
	else if (counter_In1_Alarm  < (PERIOD_ALARM_REPEAT*1000*60))/*ms*/{
  de:	80 32       	cpi	r24, 0x20	; 32
  e0:	ff eb       	ldi	r31, 0xBF	; 191
  e2:	9f 07       	cpc	r25, r31
  e4:	10 f4       	brcc	.+4      	; 0xea <RepeatAlarm+0x42>
		PORTD=0b000;
  e6:	1b b8       	out	0x0b, r1	; 11
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <RepeatAlarm+0x4a>
	}
	else{
		counter_In1_Alarm=0;
		counter_In2_Alarm=0;
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
	}
	else if (counter_In1_Alarm  < (PERIOD_ALARM_REPEAT*1000*60))/*ms*/{
		PORTD=0b000;
	}
	else{
		counter_In1_Alarm=0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
		counter_In2_Alarm=0;
	}
	counter_In1_Alarm++;
  f2:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	ef e9       	ldi	r30, 0x9F	; 159
  f6:	ff e0       	ldi	r31, 0x0F	; 15
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <RepeatAlarm+0x50>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <RepeatAlarm+0x56>
  fe:	00 00       	nop
 100:	d7 cf       	rjmp	.-82     	; 0xb0 <RepeatAlarm+0x8>

00000102 <__vector_9>:
	while (1); //do nothing
	return 0;
}


ISR (TIMER2_OVF_vect ){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	if (time_learn < (PERIOD_LEARNING*3662)){ //3662= (60*16e6) / (1024*256)
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 130:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 134:	88 31       	cpi	r24, 0x18	; 24
 136:	2e e1       	ldi	r18, 0x1E	; 30
 138:	92 07       	cpc	r25, r18
 13a:	a1 05       	cpc	r26, r1
 13c:	b1 05       	cpc	r27, r1
 13e:	70 f4       	brcc	.+28     	; 0x15c <__vector_9+0x5a>
		//PORTB^=0xff; //reverse B2 LED
		++time_learn;
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	a1 1d       	adc	r26, r1
 144:	b1 1d       	adc	r27, r1
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 152:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		SMCR= (1<<SM1)|(1<<SM0)|(1<<SE);//go to power-save mode, wake up with timer 2 overflows
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	83 bf       	out	0x33, r24	; 51
	else {
		TCCR2B =0;//stop timer2
		RepeatAlarm();//repeat infinitely until reset
	}

}
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_9+0x62>
		//PORTB^=0xff; //reverse B2 LED
		++time_learn;
		SMCR= (1<<SM1)|(1<<SM0)|(1<<SE);//go to power-save mode, wake up with timer 2 overflows
	}
	else {
		TCCR2B =0;//stop timer2
 15c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		RepeatAlarm();//repeat infinitely until reset
 160:	0e 94 54 00 	call	0xa8	; 0xa8 <RepeatAlarm>
	}

}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
